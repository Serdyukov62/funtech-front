{
  "version": 3,
  "sources": ["empty-module:@remix-run/node", "../../../contracts/sign/sign.ts", "../../../node_modules/remix-hook-form/dist/index.js"],
  "sourcesContent": ["module.exports = {};", "import { z } from 'zod';\r\n\r\nconst signInSchema = z.object({\r\n  email: z.string().email(),\r\n  password: z.string().min(8),\r\n});\r\n\r\nconst signUpSchema = signInSchema\r\n  .extend({\r\n    confirmPassword: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirmPassword, {\r\n    message: 'Passwords must match',\r\n    path: ['confirmPassword'],\r\n  });\r\n\r\ntype ZSignUp = z.infer<typeof signUpSchema>;\r\ntype ZSignIn = z.infer<typeof signInSchema>;\r\n\r\nconst inputSignUpFormLabels: Record<keyof ZSignUp, string> = {\r\n  email: 'Email',\r\n  confirmPassword: '\u041F\u0440\u0438\u0434\u0443\u043C\u0430\u0439\u0442\u0435 \u043F\u0430\u0440\u043E\u043B\u044C',\r\n  password: '\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u0435 \u043F\u0430\u0440\u043E\u043B\u044C',\r\n};\r\n\r\nconst inputSignInFormLabels: Record<keyof ZSignIn, string> = {\r\n  email: 'Email',\r\n  password: '\u041F\u0430\u0440\u043E\u043B\u044C',\r\n};\r\n\r\nexport { signUpSchema, signInSchema };\r\nexport type { ZSignIn, ZSignUp };\r\nexport { inputSignUpFormLabels, inputSignInFormLabels };\r\n", "// src/utilities/index.ts\nvar tryParseJSON = (jsonString) => {\n  try {\n    const json = JSON.parse(jsonString);\n    return json;\n  } catch (e) {\n    return jsonString;\n  }\n};\nvar generateFormData = (formData, preserveStringified = false) => {\n  const outputObject = {};\n  for (const [key, value] of formData.entries()) {\n    const data = preserveStringified ? value : tryParseJSON(value.toString());\n    const keyParts = key.split(\".\");\n    let currentObject = outputObject;\n    for (let i = 0; i < keyParts.length - 1; i++) {\n      const keyPart = keyParts[i];\n      if (!currentObject[keyPart]) {\n        currentObject[keyPart] = /^\\d+$/.test(keyParts[i + 1]) ? [] : {};\n      }\n      currentObject = currentObject[keyPart];\n    }\n    const lastKeyPart = keyParts[keyParts.length - 1];\n    const lastKeyPartIsArray = /\\[\\d*\\]$|\\[\\]$/.test(lastKeyPart);\n    if (lastKeyPartIsArray) {\n      const key2 = lastKeyPart.replace(/\\[\\d*\\]$|\\[\\]$/, \"\");\n      if (!currentObject[key2]) {\n        currentObject[key2] = [];\n      }\n      currentObject[key2].push(data);\n    }\n    if (!lastKeyPartIsArray) {\n      if (/^\\d+$/.test(lastKeyPart)) {\n        currentObject.push(data);\n      } else {\n        currentObject[lastKeyPart] = data;\n      }\n    }\n  }\n  return outputObject;\n};\nvar getFormDataFromSearchParams = (request, preserveStringified = false) => {\n  const searchParams = new URL(request.url).searchParams;\n  return generateFormData(searchParams, preserveStringified);\n};\nvar isGet = (request) => request.method === \"GET\" || request.method === \"get\";\nvar getValidatedFormData = async (request, resolver, preserveStringified = false) => {\n  const data = isGet(request) ? getFormDataFromSearchParams(request, preserveStringified) : await parseFormData(request, preserveStringified);\n  const validatedOutput = await validateFormData(data, resolver);\n  return { ...validatedOutput, receivedValues: data };\n};\nvar validateFormData = async (data, resolver) => {\n  const dataToValidate = data instanceof FormData ? Object.fromEntries(data) : data;\n  const { errors, values } = await resolver(\n    dataToValidate,\n    {},\n    { shouldUseNativeValidation: false, fields: {} }\n  );\n  if (Object.keys(errors).length > 0) {\n    return { errors, data: void 0 };\n  }\n  return { errors: void 0, data: values };\n};\nvar createFormData = (data, stringifyAll = true) => {\n  const formData = new FormData();\n  if (!data) {\n    return formData;\n  }\n  Object.entries(data).map(([key, value]) => {\n    if (value instanceof FileList) {\n      for (let i = 0; i < value.length; i++) {\n        formData.append(key, value[i]);\n      }\n      return;\n    }\n    if (value instanceof File || value instanceof Blob) {\n      formData.append(key, value);\n    } else {\n      if (stringifyAll) {\n        formData.append(key, JSON.stringify(value));\n      } else {\n        if (typeof value === \"string\") {\n          formData.append(key, value);\n        } else if (value instanceof Date) {\n          formData.append(key, value.toISOString());\n        } else {\n          formData.append(key, JSON.stringify(value));\n        }\n      }\n    }\n  });\n  return formData;\n};\nvar parseFormData = async (request, preserveStringified = false) => {\n  const formData = request instanceof Request ? await request.formData() : request;\n  return generateFormData(formData, preserveStringified);\n};\n\n// src/hook/index.tsx\nimport React, { useMemo } from \"react\";\nimport {\n  useActionData,\n  useSubmit,\n  useNavigation\n} from \"@remix-run/react\";\nimport {\n  useFormContext\n} from \"react-hook-form\";\nimport { useForm, FormProvider } from \"react-hook-form\";\nvar useRemixForm = ({\n  submitHandlers,\n  submitConfig,\n  submitData,\n  fetcher,\n  stringifyAllValues = true,\n  ...formProps\n}) => {\n  var _a, _b;\n  const [isSubmittedSuccessfully, setIsSubmittedSuccessfully] = React.useState(false);\n  const actionSubmit = useSubmit();\n  const actionData = useActionData();\n  const submit = (_a = fetcher == null ? void 0 : fetcher.submit) != null ? _a : actionSubmit;\n  const data = (_b = fetcher == null ? void 0 : fetcher.data) != null ? _b : actionData;\n  const methods = useForm({ ...formProps, errors: data == null ? void 0 : data.errors });\n  const navigation = useNavigation();\n  const isSubmittingForm = useMemo(\n    () => navigation.state !== \"idle\" && navigation.formData !== void 0 || fetcher && fetcher.state !== \"idle\" && fetcher.formData !== void 0,\n    [navigation.state, navigation.formData, fetcher == null ? void 0 : fetcher.state, fetcher == null ? void 0 : fetcher.formData]\n  );\n  const onSubmit = useMemo(\n    () => (data2) => {\n      setIsSubmittedSuccessfully(true);\n      const formData = createFormData(\n        { ...data2, ...submitData },\n        stringifyAllValues\n      );\n      submit(formData, {\n        method: \"post\",\n        ...submitConfig\n      });\n    },\n    [submit, submitConfig, submitData, stringifyAllValues]\n  );\n  const onInvalid = useMemo(() => () => {\n  }, []);\n  const formState = useMemo(\n    () => ({\n      get isDirty() {\n        return methods.formState.isDirty;\n      },\n      get isLoading() {\n        return methods.formState.isLoading;\n      },\n      get isSubmitted() {\n        return methods.formState.isSubmitted;\n      },\n      get isSubmitSuccessful() {\n        return isSubmittedSuccessfully || methods.formState.isSubmitSuccessful;\n      },\n      get isSubmitting() {\n        return isSubmittingForm || methods.formState.isSubmitting;\n      },\n      get isValidating() {\n        return methods.formState.isValidating;\n      },\n      get isValid() {\n        return methods.formState.isValid;\n      },\n      get disabled() {\n        return methods.formState.disabled;\n      },\n      get submitCount() {\n        return methods.formState.submitCount;\n      },\n      get defaultValues() {\n        return methods.formState.defaultValues;\n      },\n      get dirtyFields() {\n        return methods.formState.dirtyFields;\n      },\n      get touchedFields() {\n        return methods.formState.touchedFields;\n      },\n      get validatingFields() {\n        return methods.formState.validatingFields;\n      },\n      get errors() {\n        return methods.formState.errors;\n      }\n    }),\n    [methods.formState, isSubmittedSuccessfully, isSubmittingForm]\n  );\n  const reset = useMemo(\n    () => (values, options) => {\n      setIsSubmittedSuccessfully(false);\n      methods.reset(values, options);\n    },\n    [methods.reset]\n  );\n  const register = useMemo(\n    () => (name, options) => {\n      var _a2, _b2;\n      return {\n        ...methods.register(name, options),\n        ...!(options == null ? void 0 : options.disableProgressiveEnhancement) && {\n          defaultValue: (_b2 = (_a2 = data == null ? void 0 : data.defaultValues) == null ? void 0 : _a2[name]) != null ? _b2 : \"\"\n        }\n      };\n    },\n    [methods.register, data == null ? void 0 : data.defaultValues]\n  );\n  const handleSubmit = useMemo(\n    () => {\n      var _a2, _b2;\n      return methods.handleSubmit(\n        (_a2 = submitHandlers == null ? void 0 : submitHandlers.onValid) != null ? _a2 : onSubmit,\n        (_b2 = submitHandlers == null ? void 0 : submitHandlers.onInvalid) != null ? _b2 : onInvalid\n      );\n    },\n    [methods.handleSubmit, submitHandlers, onSubmit, onInvalid]\n  );\n  const hookReturn = useMemo(\n    () => ({\n      ...methods,\n      handleSubmit,\n      reset,\n      register,\n      formState\n    }),\n    [methods, handleSubmit, reset, register, formState]\n  );\n  return hookReturn;\n};\nvar RemixFormProvider = ({\n  children,\n  ...props\n}) => {\n  return /* @__PURE__ */ React.createElement(FormProvider, { ...props }, children);\n};\nvar useRemixFormContext = () => {\n  const methods = useFormContext();\n  return {\n    ...methods,\n    handleSubmit: methods.handleSubmit\n  };\n};\nexport {\n  RemixFormProvider,\n  createFormData,\n  getFormDataFromSearchParams,\n  getValidatedFormData,\n  parseFormData,\n  useRemixForm,\n  useRemixFormContext,\n  validateFormData\n};\n"],
  "mappings": "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",
  "names": ["React"]
}
